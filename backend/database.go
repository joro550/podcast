package main

import (
	"database/sql"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"slices"

	_ "github.com/lib/pq"
)

func ConnectToDatabase() (*sql.DB, error) {
	val, found := os.LookupEnv("Connection_string")
	if !found {
		log.Fatal("Could not find connecton string")
	}

	db, err := sql.Open("postgres", val)
	if err != nil {
		log.Fatal("Could not connect to the database", err)
	}

	err = runMigrations(db)
	if err != nil {
		log.Fatal("Migrations could not be run", err)
	}

	return db, nil
}

func runMigrations(db *sql.DB) error {
	_, err := db.Exec(`CREATE TABLE IF NOT EXISTS migrations (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    filename VARCHAR(255) NOT NULL
)`)
	if err != nil {
		log.Println("Failed to create migrations table")
		return err
	}
	log.Println("created migrations table")

	fileNames, err := getMigrations(db)
	if err != nil {
		return err
	}

	log.Println("Retrieved migrations from table")

	executablePath, err := os.Executable()
	if err != nil {
		return err
	}

	migrationPath := filepath.Join(filepath.Dir(executablePath), "migrations")
	err = filepath.WalkDir(migrationPath, walkDir(db, fileNames))

	return err
}

func walkDir(db *sql.DB, migrationsRan []string) func(path string, d fs.DirEntry, err error) error {
	return func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			log.Println("Err from walk dir", err)
			return err
		}

		if d.IsDir() {
			return nil
		}

		if slices.Contains(migrationsRan, d.Name()) {
			return nil
		}

		log.Println("Reading file ", path)

		content, err := os.ReadFile(path)
		if err != nil {
			log.Println("Error reading file", err)
			return err
		}

		_, err = db.Exec(string(content))
		if err != nil {
			log.Println("error executing", err)
			return err
		}

		log.Println("Ran migration", path)

		err = insertMigration(db, d.Name())
		if err == nil {
			return err
		}

		log.Println("Inserted migration into migration table", path)

		return nil
	}
}

func getMigrations(db *sql.DB) ([]string, error) {
	rows, err := db.Query(`SELECT filename FROM migrations`)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	fileNames := []string{}

	for rows.Next() {
		var fileName string
		err := rows.Scan(&fileName)
		if err != nil {
			return []string{}, nil
		}

		fileNames = append(fileNames, fileName)
	}

	return fileNames, nil
}

func insertMigration(db *sql.DB, fileName string) error {
	_, err := db.Exec("INSERT INTO migrations(filename) VALUES($1)", fileName)
	if err != nil {
		return err
	}
	return nil
}
